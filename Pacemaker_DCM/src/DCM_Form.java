
import javax.swing.*;
import com.fazecast.jSerialComm.SerialPort;
import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class DCM_Form extends javax.swing.JFrame {

    // operating modes of pacemaker
    enum PACEMAKER_MODE { VOO, AOO, VVI, AAI };

    // paramaters to send to pacemaker
    PACEMAKER_MODE p_mode;
    int p_lower_rate_limit;
    int p_upper_rate_limit;
    float p_atr_pulse_amplitude;
    float p_vent_pulse_amplitude;
    float p_atr_pulse_width;
    float p_vent_pulse_width;
    float p_atr_sensitivity;
    float p_vent_sensitivity;
    int p_vrp;
    int p_arp;
    int p_pvarp;
    boolean p_hysteresis_enable;
    int p_hysteresis_rate_limit;
    boolean p_rate_smoothing_enable;
    int p_rate_smoothing_percent;

    // internal boolean field to track when parameters are being sent
    private boolean ADMIN_MODE = false;
    private boolean IS_CONNECTED = false;

    // current user initialized as "NULL USER"
    String username = "NULL USER";

    /**
     * Constructor method for the DCM form.
     * @param username - sets the username of the DCM formâ€”if username is 'admin',
     * then ADMIN_MODE is declared true; false otherwise
     */
    public DCM_Form(String username) {
        this.username = username;
        ADMIN_MODE = username.equals("admin");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JFormattedTextField tf;
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        inputPacingModes = new javax.swing.JComboBox<>();
        inputLowerRateLimit = new javax.swing.JSpinner();
        inputUpperRateLimit = new javax.swing.JSpinner();
        inputAtrAmplitude = new javax.swing.JSpinner();
        inputAtrPulseWidth = new javax.swing.JSpinner();
        inputAtrSensitivity = new javax.swing.JSpinner();
        inputVenAmplitude = new javax.swing.JSpinner();
        inputVenPulseWidth = new javax.swing.JSpinner();
        inputVenSensitivity = new javax.swing.JSpinner();
        inputVRP = new javax.swing.JSpinner();
        inputARP = new javax.swing.JSpinner();
        inputPVARP = new javax.swing.JSpinner();
        inputHystRateLimit = new javax.swing.JSpinner();
        inputSmoothPercent = new javax.swing.JSpinner();
        inputHystEnable = new javax.swing.JCheckBox();
        inputSmoothEnable = new javax.swing.JCheckBox();
        buttonSendParams = new javax.swing.JButton();
        portConnectedBox = new javax.swing.JCheckBox();
        portSelectionBox = new javax.swing.JComboBox<>();
        buttonConnectPort = new javax.swing.JButton();
        buttonLogout = new javax.swing.JButton();
        buttonHelp = new javax.swing.JButton();
        buttonChangePassword = new javax.swing.JButton();
        buttonEditUser = new javax.swing.JButton();
        buttonLoadNominal = new javax.swing.JButton();
        buttonLoadUserDefault = new javax.swing.JButton();
        buttonSaveUserDefault = new javax.swing.JButton();
        buttonLoadSettings = new javax.swing.JButton();
        buttonExportSettings = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Device Controller-Monitor | Current User: " + username);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Device Controller-Monitor");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("DCM Model # Placeholder");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mode / Rate Limits");
        jLabel1.setPreferredSize(new java.awt.Dimension(180, 16));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Atrial Settings");
        jLabel6.setPreferredSize(new java.awt.Dimension(180, 16));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Ventricular Settings");
        jLabel7.setPreferredSize(new java.awt.Dimension(180, 16));

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Refractory Periods");
        jLabel8.setPreferredSize(new java.awt.Dimension(180, 16));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Hysteresis");
        jLabel9.setPreferredSize(new java.awt.Dimension(180, 16));

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel10.setText("Pacing Mode");

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel12.setText("Lower Rate (ppm)");

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel13.setText("Upper Rate (ppm)");

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel14.setText("Amplitude (V)");

        jLabel15.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel15.setText("Pulse Width (ms)");

        jLabel16.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel16.setText("Sensitivity (mV)");

        jLabel19.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel19.setText("Amplitude (V)");

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel20.setText("Pulse Width (ms)");

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel21.setText("Sensitivity (mV)");

        jLabel22.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel22.setText("Ventricular (ms)");

        jLabel23.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel23.setText("Atrial (ms)");

        jLabel24.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel24.setText("PVARP (ms)");

        jLabel26.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel26.setText("Rate Limit (ppm)");

        jLabel27.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel27.setText("Percent (%)");

        jLabel28.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Rate Smoothing");
        jLabel28.setPreferredSize(new java.awt.Dimension(180, 16));

        inputPacingModes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AOO", "VOO", "AAI", "VVI" }));
        inputPacingModes.setFocusable(false);

        inputLowerRateLimit.setModel(new javax.swing.SpinnerNumberModel(60, 30, 175, 5));
        inputLowerRateLimit.setFocusable(false);
        inputLowerRateLimit.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputLowerRateLimit.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputUpperRateLimit.setModel(new javax.swing.SpinnerNumberModel(120, 50, 175, 5));
        inputUpperRateLimit.setFocusable(false);
        inputUpperRateLimit.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputUpperRateLimit.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputAtrAmplitude.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(3.5f), Float.valueOf(0.0f), Float.valueOf(7.0f), Float.valueOf(0.1f)));
        inputAtrAmplitude.setFocusable(false);
        inputAtrAmplitude.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputAtrAmplitude.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputAtrPulseWidth.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.4f), Float.valueOf(0.1f), Float.valueOf(1.9f), Float.valueOf(0.1f)));
        inputAtrPulseWidth.setFocusable(false);
        inputAtrPulseWidth.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputAtrPulseWidth.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputAtrSensitivity.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.75f), Float.valueOf(0.25f), Float.valueOf(10.0f), Float.valueOf(0.5f)));
        inputAtrSensitivity.setFocusable(false);
        inputAtrSensitivity.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputAtrSensitivity.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVenAmplitude.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(3.5f), Float.valueOf(0.0f), Float.valueOf(7.0f), Float.valueOf(0.1f)));
        inputVenAmplitude.setDoubleBuffered(true);
        inputVenAmplitude.setFocusable(false);
        inputVenAmplitude.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputVenAmplitude.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVenPulseWidth.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.4f), Float.valueOf(0.1f), Float.valueOf(1.9f), Float.valueOf(0.1f)));
        inputVenPulseWidth.setFocusable(false);
        inputVenPulseWidth.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputVenPulseWidth.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVenSensitivity.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(2.5f), Float.valueOf(0.25f), Float.valueOf(10.0f), Float.valueOf(0.5f)));
        inputVenSensitivity.setFocusable(false);
        inputVenSensitivity.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputVenSensitivity.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVRP.setModel(new javax.swing.SpinnerNumberModel(320, 150, 500, 10));
        inputVRP.setFocusable(false);
        inputVRP.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputVRP.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputARP.setModel(new javax.swing.SpinnerNumberModel(250, 150, 500, 10));
        inputARP.setFocusable(false);
        inputARP.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputARP.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputPVARP.setModel(new javax.swing.SpinnerNumberModel(250, 150, 500, 10));
        inputPVARP.setFocusable(false);
        inputPVARP.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputPVARP.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputHystRateLimit.setModel(new javax.swing.SpinnerNumberModel(30, 30, 175, 5));
        inputHystRateLimit.setEnabled(false);
        inputHystRateLimit.setFocusable(false);
        inputHystRateLimit.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputHystRateLimit.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputSmoothPercent.setModel(new javax.swing.SpinnerNumberModel(5, 0, 25, 1));
        inputSmoothPercent.setEnabled(false);
        inputSmoothPercent.setFocusable(false);
        inputSmoothPercent.setPreferredSize(new java.awt.Dimension(25, 26));
        tf = ((JSpinner.DefaultEditor) inputSmoothPercent.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputHystEnable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        inputHystEnable.setText("Enable                                  ");
        inputHystEnable.setFocusable(false);
        inputHystEnable.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        inputHystEnable.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        inputHystEnable.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputHystEnableStateChanged(evt);
            }
        });

        inputSmoothEnable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        inputSmoothEnable.setText("Enable                                  ");
        inputSmoothEnable.setFocusable(false);
        inputSmoothEnable.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        inputSmoothEnable.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        inputSmoothEnable.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputSmoothEnableStateChanged(evt);
            }
        });

        buttonSendParams.setText("Send Current Parameters to Pacemaker");
        buttonSendParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendParamsActionPerformed(evt);
            }
        });

        portConnectedBox.setBorder(null);
        portConnectedBox.setEnabled(false);
        portConnectedBox.setFocusable(false);

        SerialPort[] serialPorts = SerialPort.getCommPorts();
        String[] serialPortNames = new String[serialPorts.length];
        for (int i=0; i<serialPorts.length; i++) {
            serialPortNames[i] = serialPorts[i].getSystemPortName();
        }
        portSelectionBox.setModel(new javax.swing.DefaultComboBoxModel<>(serialPortNames));
        portSelectionBox.setFocusable(false);

        buttonConnectPort.setText("Connect");
        buttonConnectPort.setFocusable(false);
        buttonConnectPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnectPortActionPerformed(evt);
            }
        });

        buttonLogout.setText("Logout");
        buttonLogout.setFocusable(false);
        buttonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout(evt);
            }
        });

        buttonHelp.setText("Help");
        buttonHelp.setFocusable(false);
        buttonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHelpActionPerformed(evt);
            }
        });

        buttonChangePassword.setText("Change Password");
        buttonChangePassword.setFocusable(false);
        buttonChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangePasswordActionPerformed(evt);
            }
        });

        buttonEditUser.setText("Edit Users");
        buttonEditUser.setFocusable(false);
        buttonEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditUserActionPerformed(evt);
            }
        });

        buttonLoadNominal.setText("Load Nominal");
        buttonLoadNominal.setFocusable(false);
        buttonLoadNominal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadNominalActionPerformed(evt);
            }
        });

        buttonLoadUserDefault.setText("Load User's Default");
        buttonLoadUserDefault.setFocusable(false);
        buttonLoadUserDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadUserDefaultActionPerformed(evt);
            }
        });

        buttonSaveUserDefault.setText("Save User's Default");
        buttonSaveUserDefault.setFocusable(false);
        buttonSaveUserDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveUserDefaultActionPerformed(evt);
            }
        });

        buttonLoadSettings.setText("Load Settings");
        buttonLoadSettings.setFocusable(false);
        buttonLoadSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadSettingsActionPerformed(evt);
            }
        });

        buttonExportSettings.setText("Export Settings");
        buttonExportSettings.setFocusable(false);
        buttonExportSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportSettingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inputLowerRateLimit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputUpperRateLimit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputPacingModes, javax.swing.GroupLayout.Alignment.TRAILING, 0, 63, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputAtrSensitivity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(inputAtrPulseWidth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                                        .addComponent(inputAtrAmplitude, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel21))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputVenSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(inputVenPulseWidth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(inputVenAmplitude, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel24))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inputARP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                                    .addComponent(inputVRP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputPVARP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(jLabel26)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(inputHystRateLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(inputHystEnable, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel27)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(inputSmoothPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(inputSmoothEnable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(buttonSendParams, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portConnectedBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonConnectPort, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonHelp, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(buttonLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonLoadNominal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonLoadUserDefault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonEditUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonChangePassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonSaveUserDefault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonLoadSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonExportSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(inputPacingModes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(inputLowerRateLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(inputUpperRateLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(inputAtrAmplitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(inputAtrPulseWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(inputAtrSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(inputVenAmplitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(inputVenPulseWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(inputVenSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(inputVRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26)
                                    .addComponent(inputHystRateLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(inputARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputHystEnable)
                                    .addComponent(inputSmoothEnable)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel27)
                                    .addComponent(inputSmoothPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel24)
                                .addComponent(inputPVARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buttonSendParams))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(portSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonConnectPort)
                                .addComponent(jLabel3))
                            .addComponent(portConnectedBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonLoadNominal)
                        .addGap(4, 4, 4)
                        .addComponent(buttonLoadUserDefault)
                        .addGap(4, 4, 4)
                        .addComponent(buttonSaveUserDefault)
                        .addGap(4, 4, 4)
                        .addComponent(buttonLoadSettings)
                        .addGap(4, 4, 4)
                        .addComponent(buttonExportSettings)
                        .addGap(18, 18, 18)
                        .addComponent(buttonEditUser)
                        .addGap(4, 4, 4)
                        .addComponent(buttonChangePassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonHelp)
                        .addGap(4, 4, 4)
                        .addComponent(buttonLogout)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method updates all private instance fields to be sent to pacemaker.
     * All input fields from DCM form is put into instance fields.
     */
    private boolean initParameters() {
        
        // checks if hysteresis rate limit is larger than lower rate limit
        if((int) inputHystRateLimit.getValue()
                > (int) inputLowerRateLimit.getValue()) {
            // inputHystRateLimit.setValue(inputLowerRateLimit.getValue());
            JOptionPane.showMessageDialog(this, 
                    "Hysteresis rate limit cannot be larger than lower rate limit.",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;   // return false and stop assignment
        }
        
        // checks if lower rate limit is larger than upper rate limit
        if((int) inputLowerRateLimit.getValue()
                > (int) inputUpperRateLimit.getValue()) {
            // inputLowerRateLimit.setValue(inputUpperRateLimit.getValue());
            JOptionPane.showMessageDialog(this, 
                    "Lower rate limit cannot be larger than upper rate limit.",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;   // return false and stop assignment1
        }

        // determining input from jComboBox
        String p_mode_Str = (String) inputPacingModes.getSelectedItem();
        if(p_mode_Str.equals("AOO"))
            p_mode = PACEMAKER_MODE.AOO;
        else if(p_mode_Str.equals("VOO"))
            p_mode = PACEMAKER_MODE.VOO;
        else if(p_mode_Str.equals("AAI"))
            p_mode = PACEMAKER_MODE.AAI;
        else if(p_mode_Str.equals("VVI"))
            p_mode = PACEMAKER_MODE.VVI;
        else {
            // if no conditions met (jComboBox error or parsing error)
            p_mode = PACEMAKER_MODE.AOO;
            System.out.println("ERROR: p_mode default assigned AOO.\n");
        }

        p_lower_rate_limit = (int) inputLowerRateLimit.getValue();
        p_upper_rate_limit = (int) inputUpperRateLimit.getValue();

        p_atr_pulse_amplitude = (float) inputAtrAmplitude.getValue();
        p_atr_pulse_width = (float) inputAtrPulseWidth.getValue();
        p_atr_sensitivity = (float) inputAtrSensitivity.getValue();

        p_vent_pulse_amplitude = (float) inputVenAmplitude.getValue();
        p_vent_pulse_width = (float) inputVenPulseWidth.getValue();
        p_vent_sensitivity = (float) inputVenSensitivity.getValue();

        p_arp = (int) inputARP.getValue();
        p_vrp = (int) inputVRP.getValue();
        p_pvarp = (int) inputPVARP.getValue();

        // to make sure hardware gets 0 for hysteresis rate limit and rate smoothing
        // if respective enables are both unselected
        p_hysteresis_enable = inputSmoothEnable.isSelected();
        p_hysteresis_rate_limit = p_hysteresis_enable ? (int) inputHystRateLimit.getValue() : 0;
        p_rate_smoothing_enable = inputSmoothEnable.isSelected();
        p_rate_smoothing_percent = p_rate_smoothing_enable ? (int) inputSmoothPercent.getValue() : 0;
        
        return true;
    }

    private void buttonSendParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendParamsActionPerformed
        initParameters();
    }//GEN-LAST:event_buttonSendParamsActionPerformed

    private void buttonConnectPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnectPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonConnectPortActionPerformed

    /**
     * Sets all input fields as the default/nominal values for the DCM.
     * This is for if the user wants to load nominal values and edit from there.
     */
    private void buttonLoadNominalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadNominalActionPerformed
        inputPacingModes.setSelectedIndex(0);
        
        inputLowerRateLimit.setValue(60);
        inputUpperRateLimit.setValue(120);
        
        inputAtrAmplitude.setValue(5.0f);
        inputAtrPulseWidth.setValue(1.0f);
        inputAtrSensitivity.setValue(0.75f);
        
        inputVenAmplitude.setValue(5.0f);
        inputVenPulseWidth.setValue(1.0f);
        inputVenSensitivity.setValue(2.5f);
        
        inputARP.setValue(320);
        inputVRP.setValue(250);
        inputPVARP.setValue(250);
        
        inputHystEnable.setSelected(false);
        inputHystRateLimit.setValue(30);
        inputSmoothEnable.setSelected(false);
        inputSmoothPercent.setValue(5);
    }//GEN-LAST:event_buttonLoadNominalActionPerformed
    
    private void loadParamsFromDirectory(String filePathDir) {
        try {
            // initializes the reader and the scanner
            FileReader reader = new FileReader(filePathDir);
            Scanner scanner = new Scanner(reader);
            
            // iterates through text file line by line
            String line, paramName, paramValue;
            while(scanner.hasNextLine()) {
                line = scanner.nextLine();
                
                // splits line into parameter name and value
                paramName = line.split(" ")[0];
                paramValue = line.split(" ")[1];
                
                // checks if parameter name matches respective input field setter
                if(paramName.equals("p_mode"))
                    inputPacingModes.setSelectedItem(paramValue);
                if(paramName.equals("p_lower_rate_limit"))
                    inputLowerRateLimit.setValue(Integer.valueOf(paramValue));
                if(paramName.equals("p_upper_rate_limit"))
                    inputUpperRateLimit.setValue(Integer.valueOf(paramValue));
                if(paramName.equals("p_atr_pulse_amplitude"))
                    inputAtrAmplitude.setValue(Float.valueOf(paramValue));
                if(paramName.equals("p_atr_pulse_width"))
                    inputAtrPulseWidth.setValue(Float.valueOf(paramValue));
                if(paramName.equals("p_atr_sensitivity"))
                    inputAtrSensitivity.setValue(Float.valueOf(paramValue));
                if(paramName.equals("p_vent_pulse_amplitude"))
                    inputVenAmplitude.setValue(Float.valueOf(paramValue));
                if(paramName.equals("p_vent_pulse_width"))
                    inputVenPulseWidth.setValue(Float.valueOf(paramValue));
                if(paramName.equals("p_vent_sensitivity"))
                    inputVenSensitivity.setValue(Float.valueOf(paramValue));
                if(paramName.equals("p_vrp"))
                    inputARP.setValue(Integer.valueOf(paramValue));
                if(paramName.equals("p_arp"))
                    inputVRP.setValue(Integer.valueOf(paramValue));
                if(paramName.equals("p_pvarp"))
                    inputPVARP.setValue(Integer.valueOf(paramValue));
                if(paramName.equals("p_hysteresis_enable"))
                    inputHystEnable.setSelected(Boolean.parseBoolean(paramValue));
                if(paramName.equals("p_hysteresis_rate_limit"))
                    inputHystRateLimit.setValue(Integer.valueOf(paramValue));
                if(paramName.equals("p_rate_smoothing_enable"))
                    inputSmoothEnable.setSelected(Boolean.parseBoolean(paramValue));
                if(paramName.equals("p_rate_smoothing_percent"))
                    inputSmoothPercent.setValue(Integer.valueOf(paramValue));
            }
            
            scanner.close();
            reader.close();  
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void saveParametersToDirectory(String dir, String fileName, String saveType) {
        if(!initParameters()) return;
        try {
            // creates directory if it doesn't exist; skips otherwise
            // notifies user if folder is missing
            if((new File(dir)).mkdir()) {
                JOptionPane.showMessageDialog(this,
                        saveType.substring(0, 1).toUpperCase() + saveType.substring(1) 
                           + " save folder missing. New folder created.");
            }

            // write all parameters to file directory
            FileWriter writer = new FileWriter(new File(dir, fileName));
            writer.write("p_mode " + p_mode + "\n");
            writer.write("p_lower_rate_limit " + p_lower_rate_limit + "\n");
            writer.write("p_upper_rate_limit " + p_upper_rate_limit + "\n");
            writer.write("p_atr_pulse_amplitude " + p_atr_pulse_amplitude + "\n");
            writer.write("p_atr_pulse_width " + p_atr_pulse_width + "\n");
            writer.write("p_atr_sensitivity " + p_atr_sensitivity + "\n");
            writer.write("p_vent_pulse_amplitude " + p_vent_pulse_amplitude + "\n");
            writer.write("p_vent_pulse_width " + p_vent_pulse_width + "\n");
            writer.write("p_vent_sensitivity " + p_vent_sensitivity + "\n");
            writer.write("p_vrp " + p_vrp + "\n");
            writer.write("p_arp " + p_arp + "\n");
            writer.write("p_pvarp " + p_pvarp + "\n");
            writer.write("p_hysteresis_enable " + p_hysteresis_enable + "\n");
            writer.write("p_hysteresis_rate_limit " + p_hysteresis_rate_limit + "\n");
            writer.write("p_rate_smoothing_enable " + p_rate_smoothing_enable + "\n");
            writer.write("p_rate_smoothing_percent " + p_rate_smoothing_percent + "\n");
            writer.close();

            // output message to user to tell them directory which file is saved to
            JOptionPane.showMessageDialog(this, 
                    saveType.substring(0, 1).toUpperCase() + saveType.substring(1)
                            + " values for '" + username + "' successfully saved.");
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Reads the user file containing default parameters for each user. The file
     * is read line by line, and each line is parsed by splitting it into the 
     * parameter name and value. Each value is assigned to each respective text field
     * in the user interface.
     */
    private void buttonLoadUserDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadUserDefaultActionPerformed
        String filePathDir = System.getProperty("user.dir") 
                + File.separator + "DefaultParameters" 
                + File.separator + username + ".txt";
        
        if(new File(filePathDir).exists()) {
            loadParamsFromDirectory(filePathDir);
        } else {
            JOptionPane.showMessageDialog(this, "User has no default parameters.");
        }
    }//GEN-LAST:event_buttonLoadUserDefaultActionPerformed

    /**
     * 
     */
    private void buttonLoadSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadSettingsActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(
                System.getProperty("user.dir") 
                        + File.separator + "ExportedParameters"));
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Select file to load.");
        
        // only perform code when user selects a file; else just do nothing
        if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filePathDir = fc.getSelectedFile().getAbsolutePath();
            loadParamsFromDirectory(filePathDir);
        }
    }//GEN-LAST:event_buttonLoadSettingsActionPerformed
    
    /**
     * Initializes parameters from the input fields, and then writes the parameters
     * to a file in a subdirectory (/DefaultParameters/) of the working directory of the program.
     * If subdirectory doesn't exist, it is created.
     * File names are in format 'username.txt' to ensure that there is only one copy
     * of a default parameter set per each user.
     */
    private void buttonSaveUserDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveUserDefaultActionPerformed
        String fileName = username + ".txt";
        String dir = System.getProperty("user.dir") + File.separator + "DefaultParameters";
        String saveType = "Default";
        
        saveParametersToDirectory(dir, fileName, saveType);
    }//GEN-LAST:event_buttonSaveUserDefaultActionPerformed

    /**
     * Initializes parameters from the input fields, and then writes the parameters
     * to a file in a subdirectory (/ExportedParameters/) of the working directory of the program.
     * If subdirectory doesn't exist, it is created.
     * File names are in format 'username_unixTimeStamp.txt' to ensure that all
     * files are unique even if the same user wrote a file.
     */
    private void buttonExportSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportSettingsActionPerformed
        String unixTimeStr = String.valueOf(System.currentTimeMillis() / 1000L);
        String fileName = username + "_" + unixTimeStr + ".txt";
        String dir = System.getProperty("user.dir") + File.separator + "ExportedParameters";
        String saveType = "Exported";
        
        saveParametersToDirectory(dir, fileName, saveType);
    }//GEN-LAST:event_buttonExportSettingsActionPerformed

    /**
     * Creates single instance of 'EditUserForm'.
     * Only accessible if user is logged in as administrator.
     */
    private void buttonEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditUserActionPerformed
        if(ADMIN_MODE) {
            EditUserForm editUserForm = EditUserForm.getInstance();
            editUserForm.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            editUserForm.setLocationRelativeTo(this);
            editUserForm.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Login as admin.");
        }
    }//GEN-LAST:event_buttonEditUserActionPerformed

    private void buttonChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangePasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonChangePasswordActionPerformed

    private void buttonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonHelpActionPerformed

    /**
     * Notifies other suspended threads that user logged out.
     * Classes that handle this form should dispose it upon notify() call.
     */
    private void logout(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout
        synchronized(this) {
            notify();
        }
        JOptionPane.showMessageDialog(null, "Successfuly logged out.");
    }//GEN-LAST:event_logout

    /**
     * If user selects hysteresis, the respective spinner is enabled.
     * If user deselects it, the spinner is disabled.
     * Function also is performed upon any state changes to check box from other methods.
     */
    private void inputHystEnableStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputHystEnableStateChanged
        inputHystRateLimit.setEnabled(inputHystEnable.isSelected());
    }//GEN-LAST:event_inputHystEnableStateChanged

    /**
     * If user selects rate smoothing, the respective spinner is enabled.
     * If user deselects it, the spinner is disabled.
     * Function also is performed upon any state changes to check box from other methods.
     */
    private void inputSmoothEnableStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputSmoothEnableStateChanged
        inputSmoothPercent.setEnabled(inputSmoothEnable.isSelected());
    }//GEN-LAST:event_inputSmoothEnableStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChangePassword;
    private javax.swing.JButton buttonConnectPort;
    private javax.swing.JButton buttonEditUser;
    private javax.swing.JButton buttonExportSettings;
    private javax.swing.JButton buttonHelp;
    private javax.swing.JButton buttonLoadNominal;
    private javax.swing.JButton buttonLoadSettings;
    private javax.swing.JButton buttonLoadUserDefault;
    private javax.swing.JButton buttonLogout;
    private javax.swing.JButton buttonSaveUserDefault;
    private javax.swing.JButton buttonSendParams;
    private javax.swing.JSpinner inputARP;
    private javax.swing.JSpinner inputAtrAmplitude;
    private javax.swing.JSpinner inputAtrPulseWidth;
    private javax.swing.JSpinner inputAtrSensitivity;
    private javax.swing.JCheckBox inputHystEnable;
    private javax.swing.JSpinner inputHystRateLimit;
    private javax.swing.JSpinner inputLowerRateLimit;
    private javax.swing.JSpinner inputPVARP;
    private javax.swing.JComboBox<String> inputPacingModes;
    private javax.swing.JCheckBox inputSmoothEnable;
    private javax.swing.JSpinner inputSmoothPercent;
    private javax.swing.JSpinner inputUpperRateLimit;
    private javax.swing.JSpinner inputVRP;
    private javax.swing.JSpinner inputVenAmplitude;
    private javax.swing.JSpinner inputVenPulseWidth;
    private javax.swing.JSpinner inputVenSensitivity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JCheckBox portConnectedBox;
    private javax.swing.JComboBox<String> portSelectionBox;
    // End of variables declaration//GEN-END:variables
}
