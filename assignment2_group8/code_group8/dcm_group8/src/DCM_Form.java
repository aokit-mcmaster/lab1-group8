import com.fazecast.jSerialComm.SerialPort;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
//import javafx.scene.text.Font;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextArea;

public class DCM_Form extends javax.swing.JFrame {

    // pacing modes and their enumerated values
    private final String[] PacingModeList = {"AOO","VOO","AAI","VVI","DOO","AOOR","VOOR","AAIR","VVIR","DOOR"};

    // activity thresholds and their enumerated values
    private final String[] ActivityThresholdList = {"V-Low","Low","Med-Low","Med","Med-High","High","V-High"};

    // all parameters
    private byte PacingMode;
    private int LowerRateLimit;
    private int FixedAVDelay;
    private float AtrAmplitude;
    private float VentAmplitude;
    private float AtrSensitivity;
    private float VentSensitivity;
    private int AtrPulseWidth;
    private int VentPulseWidth;
    private int VentRefractoryPeriod;
    private int AtrRefractoryPeriod;
    private int MaxSensorRate;
    private byte ActivityThreshold;
    private int ReactionTime;
    private int ResponseFactor;
    private int RecoveryTime;

    // variables for privileges and DCM functionality
    private boolean ADMIN_MODE = false;
    private String MODEL_NUMBER = "";
    private String USERNAME = "NULL";

    // singleton instances of other modules
    private static DCM_SerialCOM SERIAL_COM = DCM_SerialCOM.getInstance();
    private static EditUserForm EDIT_USER_FORM = EditUserForm.getInstance();
    private static EGRAM ELECTROGRAM = EGRAM.getInstance();

    /**
     * Constructor method for the DCM form.
     * @param username - sets the username of the DCM form—if username is 'admin',
     * then ADMIN_MODE is declared true; false otherwise
     */
    public DCM_Form(String username) {
        USERNAME = username;
        ADMIN_MODE = username.equals("admin");
        
        this.initComponents();
        this.disableAllInputFields();
        this.enableInputFieldsBasedOnPacingMode();

        connectingAnimation = new ASCII_Animation(new String[] {"⠈","⠐","⠠","⢀","⡀","⠄","⠂","⠁"});
        connectingAnimation.setDelay(100);
        connectingAnimation.pause();
        connectingAnimation.animate(labelUserConnected);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JFormattedTextField tf;
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        labelPacemakerModel = new javax.swing.JLabel();
        labelUserConnected = new javax.swing.JLabel();
        buttonSendParamsToPacemaker = new javax.swing.JButton();
        portSelectionBox = new javax.swing.JComboBox<>();
        buttonConnectPort = new javax.swing.JButton();
        buttonLogout = new javax.swing.JButton();
        buttonHelp = new javax.swing.JButton();
        buttonViewEGRAM = new javax.swing.JButton();
        buttonEditUser = new javax.swing.JButton();
        buttonLoadNominal = new javax.swing.JButton();
        buttonLoadUserDefault = new javax.swing.JButton();
        buttonSaveUserDefault = new javax.swing.JButton();
        buttonLoadSettings = new javax.swing.JButton();
        buttonExportSettings = new javax.swing.JButton();
        buttonRefreshSerialPorts = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        inputPacingModes = new javax.swing.JComboBox<>();
        inputLowerRateLimit = new javax.swing.JSpinner();
        inputMaxSensorRate = new javax.swing.JSpinner();
        inputFixedAVDelay = new javax.swing.JSpinner();
        inputVentRefractoryPeriod = new javax.swing.JSpinner();
        inputAtrRefractoryPeriod = new javax.swing.JSpinner();
        inputAtrAmplitude = new javax.swing.JSpinner();
        inputAtrPulseWidth = new javax.swing.JSpinner();
        inputAtrSensitivity = new javax.swing.JSpinner();
        inputVentAmplitude = new javax.swing.JSpinner();
        inputVentPulseWidth = new javax.swing.JSpinner();
        inputVentSensitivity = new javax.swing.JSpinner();
        inputActivityThreshold = new javax.swing.JComboBox<>();
        inputReactionTime = new javax.swing.JSpinner();
        inputResponseFactor = new javax.swing.JSpinner();
        inputRecoveryTime = new javax.swing.JSpinner();
        buttonLoadParamsFromPacemaker = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Device Controller-Monitor | Current User: " + USERNAME);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labelPacemakerModel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPacemakerModel.setText("DISCONNECTED FROM DEVICE");

        labelUserConnected.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelUserConnected.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelUserConnected.setText("☒");
        labelUserConnected.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        buttonSendParamsToPacemaker.setText("Send Parameters to Pacemaker");
        buttonSendParamsToPacemaker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendParamsToPacemakerActionPerformed(evt);
            }
        });

        SerialPort[] serialPorts = SerialPort.getCommPorts();
        String[] serialPortNames = new String[serialPorts.length];
        for (int i=0; i<serialPorts.length; i++) {
            serialPortNames[i] = serialPorts[i].getSystemPortName();
        }
        portSelectionBox.setModel(new javax.swing.DefaultComboBoxModel<>(serialPortNames));
        portSelectionBox.setFocusable(false);

        buttonConnectPort.setText("Connect");
        buttonConnectPort.setFocusable(false);
        buttonConnectPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnectPortActionPerformed(evt);
            }
        });

        buttonLogout.setText("Logout");
        buttonLogout.setFocusable(false);
        buttonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout(evt);
            }
        });

        buttonHelp.setText("Help");
        buttonHelp.setFocusable(false);
        buttonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHelpActionPerformed(evt);
            }
        });

        buttonViewEGRAM.setText("View Electrogram");
        buttonViewEGRAM.setEnabled(false);
        buttonViewEGRAM.setFocusable(false);
        buttonViewEGRAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewEGRAMActionPerformed(evt);
            }
        });

        buttonEditUser.setText("Edit Users");
        buttonEditUser.setFocusable(false);
        buttonEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditUserActionPerformed(evt);
            }
        });

        buttonLoadNominal.setText("Load Nominal");
        buttonLoadNominal.setFocusable(false);
        buttonLoadNominal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadNominalActionPerformed(evt);
            }
        });

        buttonLoadUserDefault.setText("Load User's Default");
        buttonLoadUserDefault.setFocusable(false);
        buttonLoadUserDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadUserDefaultActionPerformed(evt);
            }
        });

        buttonSaveUserDefault.setText("Save User's Default");
        buttonSaveUserDefault.setFocusable(false);
        buttonSaveUserDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveUserDefaultActionPerformed(evt);
            }
        });

        buttonLoadSettings.setText("Load Settings");
        buttonLoadSettings.setFocusable(false);
        buttonLoadSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadSettingsActionPerformed(evt);
            }
        });

        buttonExportSettings.setText("Export Settings");
        buttonExportSettings.setFocusable(false);
        buttonExportSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportSettingsActionPerformed(evt);
            }
        });

        buttonRefreshSerialPorts.setText("↻");
        buttonRefreshSerialPorts.setFocusable(false);
        buttonRefreshSerialPorts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshSerialPortsActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Device Controller-Monitor");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Atrial Settings");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Mode / Rate Limits");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Refractory Periods");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Ventricular Settings");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Rate Adaptivity");

        jLabel1.setText("Pacing Mode");

        jLabel8.setText("Lower Rate Limit (ppm)");

        jLabel9.setText("Max Sensor Rate (ppm)");

        jLabel10.setText("Fixed AV Delay (ms)");

        jLabel11.setText("Regulated Amplitude (V)");

        jLabel12.setText("Pulse Width (ms)");

        jLabel13.setText("Sensitivity (V)");

        jLabel14.setText("Regulated Amplitude (V)");

        jLabel15.setText("Pulse Width (ms)");

        jLabel16.setText("Sensitivity (V)");

        jLabel17.setText("Ventricular (ms)");

        jLabel18.setText("Atrial (ms)");

        jLabel19.setText("Activity Threshold");

        jLabel20.setText("Reaction Time (sec)");

        jLabel21.setText("Response Factor");

        jLabel22.setText("Recovery Time (min)");

        inputPacingModes.setModel(new javax.swing.DefaultComboBoxModel<>(PacingModeList));
        inputPacingModes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inputPacingModesItemStateChanged(evt);
            }
        });

        inputLowerRateLimit.setModel(new javax.swing.SpinnerNumberModel(60, 30, 175, 5));
        tf = ((JSpinner.DefaultEditor) inputLowerRateLimit.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputMaxSensorRate.setModel(new javax.swing.SpinnerNumberModel(120, 50, 175, 5));
        tf = ((JSpinner.DefaultEditor) inputMaxSensorRate.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputFixedAVDelay.setModel(new javax.swing.SpinnerNumberModel(150, 70, 300, 10));
        tf = ((JSpinner.DefaultEditor) inputFixedAVDelay.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVentRefractoryPeriod.setModel(new javax.swing.SpinnerNumberModel(320, 150, 500, 10));
        tf = ((JSpinner.DefaultEditor) inputVentRefractoryPeriod.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputAtrRefractoryPeriod.setModel(new javax.swing.SpinnerNumberModel(250, 150, 500, 10));
        tf = ((JSpinner.DefaultEditor) inputAtrRefractoryPeriod.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputAtrAmplitude.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), Float.valueOf(0.0f), Float.valueOf(5.0f), Float.valueOf(0.1f)));
        tf = ((JSpinner.DefaultEditor) inputAtrAmplitude.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputAtrPulseWidth.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));
        tf = ((JSpinner.DefaultEditor) inputAtrPulseWidth.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputAtrSensitivity.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.8f), Float.valueOf(0.0f), Float.valueOf(5.0f), Float.valueOf(0.1f)));
        tf = ((JSpinner.DefaultEditor) inputAtrSensitivity.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVentAmplitude.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), Float.valueOf(0.0f), Float.valueOf(5.0f), Float.valueOf(0.1f)));
        tf = ((JSpinner.DefaultEditor) inputVentAmplitude.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVentPulseWidth.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));
        tf = ((JSpinner.DefaultEditor) inputVentPulseWidth.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputVentSensitivity.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(2.5f), Float.valueOf(0.0f), Float.valueOf(5.0f), Float.valueOf(0.1f)));
        tf = ((JSpinner.DefaultEditor) inputVentSensitivity.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputActivityThreshold.setModel(new javax.swing.DefaultComboBoxModel<>(ActivityThresholdList));

        inputReactionTime.setModel(new javax.swing.SpinnerNumberModel(30, 10, 50, 10));
        tf = ((JSpinner.DefaultEditor) inputReactionTime.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputResponseFactor.setModel(new javax.swing.SpinnerNumberModel(8, 1, 16, 1));
        tf = ((JSpinner.DefaultEditor) inputResponseFactor.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        inputRecoveryTime.setModel(new javax.swing.SpinnerNumberModel(5, 2, 16, 1));
        tf = ((JSpinner.DefaultEditor) inputRecoveryTime.getEditor()).getTextField();
        tf.setEditable(false);
        tf.setBackground(Color.white);

        buttonLoadParamsFromPacemaker.setText("View Parameters in Pacemaker");
        buttonLoadParamsFromPacemaker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadParamsFromPacemakerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelUserConnected, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRefreshSerialPorts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonConnectPort, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelPacemakerModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(inputLowerRateLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(inputPacingModes, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(inputMaxSensorRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputFixedAVDelay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(inputVentRefractoryPeriod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(inputAtrRefractoryPeriod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(inputAtrAmplitude, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputAtrPulseWidth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputAtrSensitivity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(inputActivityThreshold, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputReactionTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputResponseFactor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputRecoveryTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(inputVentAmplitude, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputVentPulseWidth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputVentSensitivity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonSendParamsToPacemaker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonViewEGRAM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonLoadParamsFromPacemaker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonHelp, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(buttonLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonLoadNominal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonLoadUserDefault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonEditUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonSaveUserDefault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonLoadSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonExportSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(inputPacingModes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel8)
                                            .addComponent(inputLowerRateLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel9)
                                            .addComponent(inputMaxSensorRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel10)
                                            .addComponent(inputFixedAVDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel19)
                                            .addComponent(inputActivityThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel20)
                                            .addComponent(inputReactionTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel21)
                                            .addComponent(inputResponseFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel22)
                                            .addComponent(inputRecoveryTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel17)
                                            .addComponent(inputVentRefractoryPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel18)
                                            .addComponent(inputAtrRefractoryPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonSendParamsToPacemaker)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonLoadParamsFromPacemaker)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonViewEGRAM))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(inputAtrAmplitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(inputAtrPulseWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(inputAtrSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(inputVentAmplitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(inputVentPulseWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(inputVentSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonConnectPort)
                            .addComponent(buttonRefreshSerialPorts)
                            .addComponent(labelPacemakerModel)
                            .addComponent(labelUserConnected)))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonLoadNominal)
                        .addGap(4, 4, 4)
                        .addComponent(buttonLoadUserDefault)
                        .addGap(4, 4, 4)
                        .addComponent(buttonSaveUserDefault)
                        .addGap(4, 4, 4)
                        .addComponent(buttonLoadSettings)
                        .addGap(4, 4, 4)
                        .addComponent(buttonExportSettings)
                        .addGap(18, 18, 18)
                        .addComponent(buttonEditUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonHelp)
                        .addGap(4, 4, 4)
                        .addComponent(buttonLogout)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method updates all private instance fields to be sent to pacemaker.
     * All input fields from DCM form is put into instance fields.
     */
    private boolean initParameters() {
        // checks if lower rate limit is larger than upper rate limit
        if((int) inputLowerRateLimit.getValue()
                > (int) inputMaxSensorRate.getValue()) {
            // inputLowerRateLimit.setValue(inputUpperRateLimit.getValue());
            JOptionPane.showMessageDialog(this,
                    "Lower rate limit cannot be larger than upper rate limit.",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;   // return false and stop assignment
        }

        // determining input from jComboBox
        String newMode = (String) inputPacingModes.getSelectedItem();
        for(byte modeIndex = 0; modeIndex < PacingModeList.length; modeIndex++) {
            if(newMode.equals(PacingModeList[modeIndex])) {
                PacingMode = modeIndex;
                break;
            }
        }

        LowerRateLimit = (int) inputLowerRateLimit.getValue();
        MaxSensorRate = (int) inputMaxSensorRate.getValue();
        FixedAVDelay = (int) inputFixedAVDelay.getValue();

        AtrAmplitude = (float) inputAtrAmplitude.getValue();
        AtrPulseWidth = (int) inputAtrPulseWidth.getValue();
        AtrSensitivity = (float) inputAtrSensitivity.getValue();

        VentAmplitude = (float) inputVentAmplitude.getValue();
        VentPulseWidth = (int) inputVentPulseWidth.getValue();
        VentSensitivity = (float) inputVentSensitivity.getValue();

        VentRefractoryPeriod = (int) inputVentRefractoryPeriod.getValue();
        AtrRefractoryPeriod = (int) inputAtrRefractoryPeriod.getValue();

        String newThreshold = (String) inputActivityThreshold.getSelectedItem();
        for(byte thresholdIndex = 0; thresholdIndex < ActivityThresholdList.length; thresholdIndex++) {
            if(newThreshold.equals(ActivityThresholdList[thresholdIndex])) {
                ActivityThreshold = thresholdIndex;
                break;
            }
        }

        ReactionTime = (int) inputReactionTime.getValue();
        ResponseFactor = (int) inputResponseFactor.getValue();
        RecoveryTime = (int) inputRecoveryTime.getValue();

        return true;
    }

    /**
     * Initializes parameters 
     */
    private void buttonSendParamsToPacemakerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendParamsToPacemakerActionPerformed
        if(!SERIAL_COM.isConnected()) {
            safelyCloseConnectedPorts();
            JOptionPane.showMessageDialog(this,
                    "Can't send parameters because disconnected from port.",
                    "Port not connected.",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(!initParameters()) {
            return;
        }

        boolean success = SERIAL_COM.writeParamaters(
                PacingMode,
                LowerRateLimit,
                FixedAVDelay,
                AtrAmplitude,
                VentAmplitude,
                AtrSensitivity,
                VentSensitivity,
                AtrPulseWidth,
                VentPulseWidth,
                VentRefractoryPeriod,
                AtrRefractoryPeriod,
                MaxSensorRate,
                ActivityThreshold,
                ReactionTime,
                ResponseFactor,
                RecoveryTime
        );
        
        if(success) {
            JOptionPane.showMessageDialog(this,
                    "Sent parameter data.");
        } else {
            JOptionPane.showMessageDialog(this,
                    "Failed to send/verify parameter data.",
                    "Communication Error.",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSendParamsToPacemakerActionPerformed

    /**
     * Loads the the parameters from the pacemaker and displays them in a dialogue
     * box for the user to see. It automatically does the conversion from byte to values.
     */
    private void buttonLoadParamsFromPacemakerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadParamsFromPacemakerActionPerformed
        if(!SERIAL_COM.isConnected()) {
            JOptionPane.showMessageDialog(this,
                    "Can't send parameters because disconnected from port.",
                    "Port not connected.",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        byte[] param = SERIAL_COM.returnPacemakerParameters();
        
        String toDisplay = "";
        toDisplay += String.format("%-25s%s %-5s\n", "PacingMode:", PacingModeList[param[0]], "");
        toDisplay += String.format("%-25s%d %-5s\n", "LowerRateLimit:", (param[1]&0xFF), "ppm");
        toDisplay += String.format("%-25s%d %-5s\n", "FixedAVDelay:", (param[2]&0xFF)*10, "ms");
        toDisplay += String.format("%-25s%.1f %-5s\n", "AtrAmplitude:", (param[3]&0xFF)*0.1, "V");
        toDisplay += String.format("%-25s%.1f %-5s\n", "VentAmplitude:", (param[4]&0xFF)*0.1, "V");
        toDisplay += String.format("%-25s%.1f %-5s\n", "AtrSensitivity:", (param[5]&0xFF)*0.1, "V");
        toDisplay += String.format("%-25s%.1f %-5s\n", "VentSensitivity:", (param[6]&0xFF)*0.1, "V");
        toDisplay += String.format("%-25s%d %-5s\n", "AtrPulseWidth:", (param[7]&0xFF), "ms");
        toDisplay += String.format("%-25s%d %-5s\n", "VentPulseWidth:", (param[8]&0xFF), "ms");
        toDisplay += String.format("%-25s%d %-5s\n", "VentRefractoryPeriod:", (param[9]&0xFF)*10, "ms");
        toDisplay += String.format("%-25s%d %-5s\n", "AtrRefractoryPeriod:", (param[10]&0xFF)*10, "ms");
        toDisplay += String.format("%-25s%d %-5s\n", "MaxSensorRate:", (param[11]&0xFF), "ppm");
        toDisplay += String.format("%-25s%s %-5s\n", "ActivityThreshold:", ActivityThresholdList[param[12]], "");
        toDisplay += String.format("%-25s%d %-5s\n", "ReactionTime:", (param[13]&0xFF), "sec");
        toDisplay += String.format("%-25s%d %-5s\n", "ResponseFactor:", (param[14]&0xFF), "");
        toDisplay += String.format("%-25s%d %-5s", "RecoveryTime:", (param[15]&0xFF), "min");
        
        JTextArea textArea = new JTextArea(toDisplay);
        textArea.setEditable(false);
        textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        
        JOptionPane.showMessageDialog(this,
                textArea,
                "Parameters from Pacemaker",
                JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_buttonLoadParamsFromPacemakerActionPerformed

    /**
     * Checks if a given port name is available in list of ports.
     * @param portName - name of the port
     * @return true if it is in, false otherwise.
     */
    private boolean isValidSerialPort(String portName) {
        SerialPort[] serialPorts = SerialPort.getCommPorts();
        for (int i=0; i<serialPorts.length; i++) {
            if(portName.equals(serialPorts[i].getSystemPortName())) {
                return true;
            }
        }
        return false;
    }

    /**
     * Method refreshes the jComboBox containing all the available serial ports
     * for user the select.
     */
    private void refreshSerialPorts() {
        SerialPort[] serialPorts = SerialPort.getCommPorts();
        String[] serialPortNames = new String[serialPorts.length];
        for(int i=0; i<serialPorts.length; i++) {
            serialPortNames[i] = serialPorts[i].getSystemPortName();
        }
        portSelectionBox.setModel(new javax.swing.DefaultComboBoxModel<>(serialPortNames));
    }

    /**
     * Closes all connected ports and removes all data listeners. Refreshes all
     * instance fields as well as prompt the user that the connected port was disconnected.
     */
    private void safelyCloseConnectedPorts() {
        labelUserConnected.setText("☒");
        labelPacemakerModel.setText("DISCONNECTED FROM DEVICE");
        buttonViewEGRAM.setEnabled(false);  // EGRAM is disconnected
        SERIAL_COM.disconnect();
        if(SERIAL_COM.isConnected()) {
            String portName = SERIAL_COM.getPortName();
            SERIAL_COM.disconnect();
            JOptionPane.showMessageDialog(this,
                    "Disconnected from " + portName + ".",
                    "Port disconnected",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Performs on a separate thread to not stall the program when connecting.
     * Button is disabled while thread is running so user can't spam.
     * User is prompted an error and function returns when port is no longer available,
     * if already connected to the same port, if port initialization fails, and if
     * serial number can't be obtained within limited tries.
     * If all checks pass, user is prompted so, and a new thread is launched to
     * occasionally poll the port to continue to check if it's open.
    */
    private void buttonConnectPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnectPortActionPerformed
    new Thread(() -> {
        buttonConnectPort.setEnabled(false); // disable so user doesn't spam

        String portName = (String) portSelectionBox.getSelectedItem();
        SerialPort port = SerialPort.getCommPort(portName);

        // loading sequence to indicate to user that DCM is connecting to port
        connectingAnimation.play();

        // if for some reason port is no longer available since initialization
        if(!isValidSerialPort(portName)) {
            connectingAnimation.pause();
            labelUserConnected.setText("☒");
            JOptionPane.showMessageDialog(this,
                    portName + " not found.\nCheck refreshed ports from list.",
                    "Port disconnected.",
                    JOptionPane.ERROR_MESSAGE);
            refreshSerialPorts(); // refresh list so user can select again
            buttonConnectPort.setEnabled(true);
            return; // stop executing method
        }

        // if already connected to some port
        if(SERIAL_COM.isConnected()) {
            // if trying to connect to already connected port
            if(portName.equals(SERIAL_COM.getPortName())) {
                connectingAnimation.pause();
                labelUserConnected.setText("☑");
                JOptionPane.showMessageDialog(this,
                        "Already connected to " + portName + ".",
                        "Port disconnected.",
                        JOptionPane.ERROR_MESSAGE);
                buttonConnectPort.setEnabled(true);
                return;
            }
            // trying to connect to a different port
            else {
                safelyCloseConnectedPorts();
            }
        }

        // initPort will try open the port,
        // returns false if timeout error occurs when connecting
        if(!SERIAL_COM.initPort(port)) {
            connectingAnimation.pause();
            labelUserConnected.setText("☒");
            JOptionPane.showMessageDialog(this,
                    "Can't connect to " + portName + ".",
                    "Connection timeout",
                    JOptionPane.ERROR_MESSAGE);
            buttonConnectPort.setEnabled(true);
            return;
        }

        // if the pacemaker did NOT send a serial code, it is wrong port
        String receivedCode = SERIAL_COM.returnSerialCode();
        if(receivedCode.isEmpty()) {
            connectingAnimation.pause();
            labelUserConnected.setText("☒");
            SERIAL_COM.disconnect();
            JOptionPane.showMessageDialog(this,
                    "Port open, but can't get serial number.\n"
                            + "Could be wrong device/model connected.",
                    "Connection timeout",
                    JOptionPane.ERROR_MESSAGE);
            buttonConnectPort.setEnabled(true);
            return;
        }

        // prompt user that serial port is connected
        connectingAnimation.pause();
        labelUserConnected.setText("☑");
        buttonViewEGRAM.setEnabled(true);
        labelPacemakerModel.setText("Connected to: "
                + receivedCode);
        JOptionPane.showMessageDialog(this,
                "Connected to " + portName + ".\n" +
                        ((!receivedCode.equals(MODEL_NUMBER) && !MODEL_NUMBER.isEmpty())
                                ? "Different pacemaker approached."
                                : ""));
        MODEL_NUMBER = receivedCode;
        buttonConnectPort.setEnabled(true);

        // start a separate thread that occasionally polls the port
        new Thread(() -> {
            while(SERIAL_COM.isConnected()) {
                try {
                    Thread.sleep(1000);
                } catch(Exception e) {
                    e.printStackTrace();
                }
            }
            safelyCloseConnectedPorts();
            JOptionPane.showMessageDialog(this,
                    "Disconnected from " + portName + ".",
                    "Port disconnected",
                    JOptionPane.ERROR_MESSAGE);
        }).start();

    }).start();
    }//GEN-LAST:event_buttonConnectPortActionPerformed

    /**
     * Upon button press, method closes all connected ports then refreshes the
     * available list of ports.
     */
    private void buttonRefreshSerialPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshSerialPortsActionPerformed
        safelyCloseConnectedPorts();
        refreshSerialPorts();
    }//GEN-LAST:event_buttonRefreshSerialPortsActionPerformed

    /**
     * Sets all input fields as the default/nominal values for the DCM.
     * This is for if the user wants to load nominal values and edit from there.
     */
    private void buttonLoadNominalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadNominalActionPerformed
        inputPacingModes.setSelectedIndex(0);
        inputLowerRateLimit.setValue(60);
        inputMaxSensorRate.setValue(120);
        inputFixedAVDelay.setValue(150);

        inputAtrAmplitude.setValue(5.0f);
        inputAtrPulseWidth.setValue(1);
        inputAtrSensitivity.setValue(0.8f);

        inputVentAmplitude.setValue(5.0f);
        inputVentPulseWidth.setValue(1);
        inputVentSensitivity.setValue(2.5f);

        inputAtrRefractoryPeriod.setValue(320);
        inputVentRefractoryPeriod.setValue(250);

        inputActivityThreshold.setSelectedIndex(3);
        inputReactionTime.setValue(30);
        inputResponseFactor.setValue(8);
        inputRecoveryTime.setValue(5);
    }//GEN-LAST:event_buttonLoadNominalActionPerformed

    /**
     * Method reads the file from the specified directory sent as a parameter.
     * The file is read line by line and the text fields in the user interface
     * is updated.
     * @param filePathDir - the file directory to load parameters from
     */
    private void loadParamsFromDirectory(String filePathDir) {
        try {
            // initializes the reader and the scanner
            FileReader reader = new FileReader(filePathDir);
            Scanner scanner = new Scanner(reader);

            // iterates through text file line by line
            String line, paramName, paramValue;
            while(scanner.hasNextLine()) {
                line = scanner.nextLine();

                // splits line into parameter name and value
                String[] splitLine = line.split(" ");
                paramName = splitLine[0];
                paramValue = splitLine[1];

                // checks if parameter name matches respective input field setter
                switch(paramName) {
                    case "PacingMode":
                        inputPacingModes.setSelectedIndex(Integer.valueOf(paramValue));
                        break;
                    case "LowerRateLimit":
                        inputLowerRateLimit.setValue(Integer.valueOf(paramValue));
                        break;
                    case "FixedAVDelay":
                        inputFixedAVDelay.setValue(Integer.valueOf(paramValue));
                        break;
                    case "AtrAmplitude":
                        inputAtrAmplitude.setValue(Float.valueOf(paramValue));
                        break;
                    case "VentAmplitude":
                        inputVentAmplitude.setValue(Float.valueOf(paramValue));
                        break;
                    case "AtrSensitivity":
                        inputAtrSensitivity.setValue(Float.valueOf(paramValue));
                        break;
                    case "VentSensitivity":
                        inputVentSensitivity.setValue(Float.valueOf(paramValue));
                        break;
                    case "AtrPulseWidth":
                        inputAtrPulseWidth.setValue(Integer.valueOf(paramValue));
                        break;
                    case "VentPulseWidth":
                        inputVentPulseWidth.setValue(Integer.valueOf(paramValue));
                        break;
                    case "VentRefractoryPeriod":
                        inputVentRefractoryPeriod.setValue(Integer.valueOf(paramValue));
                        break;
                    case "AtrRefractoryPeriod":
                        inputAtrRefractoryPeriod.setValue(Integer.valueOf(paramValue));
                        break;
                    case "MaxSensorRate":
                        inputMaxSensorRate.setValue(Integer.valueOf(paramValue));
                        break;
                    case "ActivityThreshold":
                        inputActivityThreshold.setSelectedIndex(Integer.valueOf(paramValue));
                        break;
                    case "ReactionTime":
                        inputReactionTime.setValue(Integer.valueOf(paramValue));
                        break;
                    case "ResponseFactor":
                        inputResponseFactor.setValue(Integer.valueOf(paramValue));
                        break;
                    case "RecoveryTime":
                        inputRecoveryTime.setValue(Integer.valueOf(paramValue));
                        break;
                }
            }

            // close scanner and reader
            scanner.close();
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method initializes all parameters from the user interface. Then a new
     * file is created at the directory described by the parameters, The DCM parameters
     * are then written to the .txt file line by line, which the value type and the value,
     * separated by a space.
     * @param dir - the directory of the folder which file is stored in
     * @param fileName - the name of the file to save
     * @param saveType - wether the file is exported or a default save
     */
    private void saveParametersToDirectory(String dir, String fileName, String saveType) {
        if(!initParameters()) return;
        try {
            // creates directory if it doesn't exist; skips otherwise
            // notifies user if folder is missing
            if((new File(dir)).mkdir()) {
                JOptionPane.showMessageDialog(this,
                        saveType.substring(0, 1).toUpperCase() + saveType.substring(1)
                           + " save folder missing. New folder created.");
            }

            // write all parameters to file directory
            FileWriter writer = new FileWriter(new File(dir, fileName));
            writer.write("Pacemaker Model Number: " +
                    (!MODEL_NUMBER.isEmpty() ? MODEL_NUMBER + "\n" : "NULL\n"));
            writer.write("PacingMode " + PacingMode + "\n");
            writer.write("LowerRateLimit " + LowerRateLimit + "\n");
            writer.write("FixedAVDelay " + FixedAVDelay + "\n");
            writer.write("AtrAmplitude " + AtrAmplitude + "\n");
            writer.write("VentAmplitude " + VentAmplitude + "\n");
            writer.write("AtrSensitivity " + AtrSensitivity + "\n");
            writer.write("VentSensitivity " + VentSensitivity + "\n");
            writer.write("AtrPulseWidth " + AtrPulseWidth + "\n");
            writer.write("VentPulseWidth " + VentPulseWidth + "\n");
            writer.write("VentRefractoryPeriod " + VentRefractoryPeriod + "\n");
            writer.write("AtrRefractoryPeriod " + AtrRefractoryPeriod + "\n");
            writer.write("MaxSensorRate " + MaxSensorRate + "\n");
            writer.write("ActivityThreshold " + ActivityThreshold + "\n");
            writer.write("ReactionTime " + ReactionTime + "\n");
            writer.write("ResponseFactor " + ResponseFactor + "\n");
            writer.write("RecoveryTime " + RecoveryTime + "\n");
            writer.close();

            // output message to user to tell them directory which file is saved to
            JOptionPane.showMessageDialog(this,
                    saveType.substring(0, 1).toUpperCase() + saveType.substring(1)
                            + " values for '" + USERNAME + "' successfully saved.");

        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Reads the user file containing default parameters for each user. If the
     * user has an existing default setting, it is loaded; otherwise, the user
     * is prompted that they must save default values.
     */
    private void buttonLoadUserDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadUserDefaultActionPerformed
        String filePathDir = System.getProperty("user.dir")
                + File.separator + "DefaultParameters"
                + File.separator + USERNAME + ".txt";

        if(!(new File(filePathDir).exists())) {
            JOptionPane.showMessageDialog(this,
                    "User has no default parameters.",
                    "File path not found.",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        loadParamsFromDirectory(filePathDir);
    }//GEN-LAST:event_buttonLoadUserDefaultActionPerformed

    /**
     * Opens a file chooser window that lets user select the file directory
     * which they want to load the parameter values from.
     */
    private void buttonLoadSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadSettingsActionPerformed
        String filePathDir = System.getProperty("user.dir")
                + File.separator + "ExportedParameters";
        
        if(!(new File(filePathDir).exists())) {
            JOptionPane.showMessageDialog(this,
                    "There are no exported text files.\nTry creating one.",
                    "File path not found.",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(
                System.getProperty("user.dir")
                        + File.separator + "ExportedParameters"));
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        Action details = fc.getActionMap().get("viewTypeDetails");
        details.actionPerformed(null);
        fc.setDialogTitle("Select file to load.");

        // only perform code when user selects a file; else just do nothing
        if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            filePathDir = fc.getSelectedFile().getAbsolutePath();
            loadParamsFromDirectory(filePathDir);
        }
    }//GEN-LAST:event_buttonLoadSettingsActionPerformed

    /**
     * Initializes parameters from the input fields, and then writes the parameters
     * to a file in a subdirectory (/DefaultParameters/) of the working directory of the program.
     * File names are in format 'username.txt' to ensure that there is only one copy
     * of a default parameter set per each user.
     */
    private void buttonSaveUserDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveUserDefaultActionPerformed
        String fileName = USERNAME + ".txt";
        String dir = System.getProperty("user.dir") + File.separator + "DefaultParameters";
        String saveType = "Default";

        saveParametersToDirectory(dir, fileName, saveType);
    }//GEN-LAST:event_buttonSaveUserDefaultActionPerformed

    /**
     * Initializes parameters from the input fields, and then writes the parameters
     * to a file in a subdirectory (/ExportedParameters/) of the working directory of the program.
     * File names are in format 'username_unixTimeStamp.txt' to ensure that all
     * files are unique even if the same user wrote a file.
     */
    private void buttonExportSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportSettingsActionPerformed
        String unixTimeStr = String.valueOf(System.currentTimeMillis() / 1000L);
        String fileName = USERNAME + "_" + unixTimeStr + ".txt";
        String dir = System.getProperty("user.dir") + File.separator + "ExportedParameters";
        String saveType = "Exported";

        saveParametersToDirectory(dir, fileName, saveType);
    }//GEN-LAST:event_buttonExportSettingsActionPerformed

    /**
     * Creates single instance of 'EditUserForm'.
     * Only accessible if user is logged in as administrator.
     */
    private void buttonEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditUserActionPerformed
        if(!ADMIN_MODE) {
            JOptionPane.showMessageDialog(this, "Login as admin.");
            return;
        }

        EDIT_USER_FORM = EditUserForm.getInstance();
        EDIT_USER_FORM.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        EDIT_USER_FORM.setLocationRelativeTo(this);
        EDIT_USER_FORM.setVisible(true);
    }//GEN-LAST:event_buttonEditUserActionPerformed

    private void buttonViewEGRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewEGRAMActionPerformed
        if(SERIAL_COM.isConnected()) {
            ELECTROGRAM = EGRAM.getInstance();
            ELECTROGRAM.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            ELECTROGRAM.setLocationRelativeTo(this);
            ELECTROGRAM.setVisible(true);
        }
    }//GEN-LAST:event_buttonViewEGRAMActionPerformed

    /**
     * Opens text file that should be in local directory named 'help.txt'.
     */
    private void buttonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHelpActionPerformed
        try {
            String fileName = "help.txt";
            String filePathDir = System.getProperty("user.dir") + File.separator + fileName;
            File file = new File(filePathDir);
            if(file.exists()) {
                java.awt.Desktop.getDesktop().edit(file);
            } else {
                JOptionPane.showMessageDialog(this,
                        "File " + fileName + " not found.\nMay have been deleted.",
                        "File path not found.",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_buttonHelpActionPerformed

    /**
     * Notifies other suspended threads that user logged out.
     * Classes that handle this form should dispose1 it upon notify() call.
     */
    private void logout(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout
        if(SERIAL_COM.isConnected())
            safelyCloseConnectedPorts();
        USERNAME = "NULL";
        ADMIN_MODE = false;
        synchronized(this) {
            notify();
        }
        JOptionPane.showMessageDialog(null, "Successfuly logged out.");
    }//GEN-LAST:event_logout

    /**
     * Disables all input fields, then enables the ones that are are used by the
     * current pacing mode.
     */
    private void enableInputFieldsBasedOnPacingMode() {
        disableAllInputFields();
        
        inputPacingModes.setEnabled(true); // common to all modes
        inputLowerRateLimit.setEnabled(true); // common to all modes
        
        String newMode = (String) inputPacingModes.getSelectedItem();
        switch(newMode) {
            case "AOO":
                inputAtrAmplitude.setEnabled(true);
                inputAtrPulseWidth.setEnabled(true);
                break;
            case "VOO":
                inputVentAmplitude.setEnabled(true);
                inputVentPulseWidth.setEnabled(true);
                break;
            case "AAI":
                inputAtrAmplitude.setEnabled(true);
                inputAtrSensitivity.setEnabled(true);
                inputAtrPulseWidth.setEnabled(true);
                inputAtrRefractoryPeriod.setEnabled(true);
                break;
            case "VVI":
                inputVentAmplitude.setEnabled(true);
                inputVentSensitivity.setEnabled(true);
                inputVentPulseWidth.setEnabled(true);
                inputVentRefractoryPeriod.setEnabled(true);
                break;
            case "DOO":
                inputFixedAVDelay.setEnabled(true);
                inputAtrAmplitude.setEnabled(true);
                inputVentAmplitude.setEnabled(true);
                inputAtrPulseWidth.setEnabled(true);
                inputVentPulseWidth.setEnabled(true);
                break;
            case "AOOR":
                inputAtrAmplitude.setEnabled(true);
                inputAtrPulseWidth.setEnabled(true);
                inputActivityThreshold.setEnabled(true);
                inputReactionTime.setEnabled(true);
                inputResponseFactor.setEnabled(true);
                inputRecoveryTime.setEnabled(true);
                break;
            case "VOOR":
                inputVentAmplitude.setEnabled(true);
                inputVentPulseWidth.setEnabled(true);
                inputActivityThreshold.setEnabled(true);
                inputReactionTime.setEnabled(true);
                inputResponseFactor.setEnabled(true);
                inputRecoveryTime.setEnabled(true);
                break;
            case "AAIR":
                inputAtrAmplitude.setEnabled(true);
                inputAtrSensitivity.setEnabled(true);
                inputAtrPulseWidth.setEnabled(true);
                inputAtrRefractoryPeriod.setEnabled(true);
                inputActivityThreshold.setEnabled(true);
                inputReactionTime.setEnabled(true);
                inputResponseFactor.setEnabled(true);
                inputRecoveryTime.setEnabled(true);
                break;
            case "VVIR":
                inputVentAmplitude.setEnabled(true);
                inputVentSensitivity.setEnabled(true);
                inputVentPulseWidth.setEnabled(true);
                inputVentRefractoryPeriod.setEnabled(true);
                inputActivityThreshold.setEnabled(true);
                inputReactionTime.setEnabled(true);
                inputResponseFactor.setEnabled(true);
                inputRecoveryTime.setEnabled(true);
                break;
            case "DOOR":
                inputFixedAVDelay.setEnabled(true);
                inputAtrAmplitude.setEnabled(true);
                inputVentAmplitude.setEnabled(true);
                inputAtrPulseWidth.setEnabled(true);
                inputVentPulseWidth.setEnabled(true);
                inputActivityThreshold.setEnabled(true);
                inputReactionTime.setEnabled(true);
                inputResponseFactor.setEnabled(true);
                inputRecoveryTime.setEnabled(true);
                break;
        }
    }
    
    /**
     * Disables all input fields.
     */
    private void disableAllInputFields() {
        inputPacingModes.setEnabled(false);
        inputLowerRateLimit.setEnabled(false);
        inputFixedAVDelay.setEnabled(false);
        inputAtrAmplitude.setEnabled(false);
        inputVentAmplitude.setEnabled(false);
        inputAtrSensitivity.setEnabled(false);
        inputVentSensitivity.setEnabled(false);
        inputAtrPulseWidth.setEnabled(false);
        inputVentPulseWidth.setEnabled(false);
        inputVentRefractoryPeriod.setEnabled(false);
        inputAtrRefractoryPeriod.setEnabled(false);
        inputMaxSensorRate.setEnabled(false);
        inputActivityThreshold.setEnabled(false);
        inputReactionTime.setEnabled(false);
        inputResponseFactor.setEnabled(false);
        inputRecoveryTime.setEnabled(false);
    }
    
    /**
     * Action listener that listens upon inputPacingModes item change.
     * @param evt - ItemEvent object
     */
    private void inputPacingModesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inputPacingModesItemStateChanged
        enableInputFieldsBasedOnPacingMode();
    }//GEN-LAST:event_inputPacingModesItemStateChanged

    private ASCII_Animation connectingAnimation;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonConnectPort;
    private javax.swing.JButton buttonEditUser;
    private javax.swing.JButton buttonExportSettings;
    private javax.swing.JButton buttonHelp;
    private javax.swing.JButton buttonLoadNominal;
    private javax.swing.JButton buttonLoadParamsFromPacemaker;
    private javax.swing.JButton buttonLoadSettings;
    private javax.swing.JButton buttonLoadUserDefault;
    private javax.swing.JButton buttonLogout;
    private javax.swing.JButton buttonRefreshSerialPorts;
    private javax.swing.JButton buttonSaveUserDefault;
    private javax.swing.JButton buttonSendParamsToPacemaker;
    private javax.swing.JButton buttonViewEGRAM;
    private javax.swing.JComboBox<String> inputActivityThreshold;
    private javax.swing.JSpinner inputAtrAmplitude;
    private javax.swing.JSpinner inputAtrPulseWidth;
    private javax.swing.JSpinner inputAtrRefractoryPeriod;
    private javax.swing.JSpinner inputAtrSensitivity;
    private javax.swing.JSpinner inputFixedAVDelay;
    private javax.swing.JSpinner inputLowerRateLimit;
    private javax.swing.JSpinner inputMaxSensorRate;
    private javax.swing.JComboBox<String> inputPacingModes;
    private javax.swing.JSpinner inputReactionTime;
    private javax.swing.JSpinner inputRecoveryTime;
    private javax.swing.JSpinner inputResponseFactor;
    private javax.swing.JSpinner inputVentAmplitude;
    private javax.swing.JSpinner inputVentPulseWidth;
    private javax.swing.JSpinner inputVentRefractoryPeriod;
    private javax.swing.JSpinner inputVentSensitivity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelPacemakerModel;
    private javax.swing.JLabel labelUserConnected;
    private javax.swing.JComboBox<String> portSelectionBox;
    // End of variables declaration//GEN-END:variables
}
